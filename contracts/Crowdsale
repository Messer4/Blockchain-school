pragma solidity ^0.4.13;

import "Ownable"
import "SimpleTokenCoin"
import "SafeMath"

contract Crowdsale is Ownable {
    
    using SafeMath for uint;
    
    address multisig;

    uint restrictedPercent;

    address restricted;

    SimpleTokenCoin public token = new SimpleTokenCoin();

    uint start;
    
    uint period;

    uint hardcap;

    uint rate;

    function Crowdsale() {
        multisig = msg.sender;
        restricted = msg.sender;
        restrictedPercent = 30;
        rate = 210;
        hardcap = 350000;
        discount = 20;
    }

   
	
    modifier isUnderHardCap() {
        require(multisig.balance <= hardcap);
        _;
    }

    function finishMinting() public onlyOwner {
        uint issuedTokenSupply = token.totalSupply();
        uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100 - restrictedPercent);
        token.mint(restricted, restrictedTokens);
        token.finishMinting();
    }

    function createTokens() isUnderHardCap payable {
        multisig.transfer(msg.value);
       
        uint q = token.totalSupply.div(17500);
        rate = rate.mul(120 - q).div(100);
        uint tokens = rate.mul(msg.value).div(1 ether);
        token.mint(msg.sender, tokens);
    }

    function() external payable {
        createTokens();
    }
    
}
